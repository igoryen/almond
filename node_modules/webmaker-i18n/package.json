{
  "name": "webmaker-i18n",
  "version": "0.0.8",
  "description": "Webmaker Localization Components for node.js and the browser",
  "main": "./i18n.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mozilla/node-webmaker-i18n.git"
  },
  "keywords": [
    "webmaker"
  ],
  "author": {
    "name": "The Webmaker Team",
    "email": "webmaker-dev@mozilla.org"
  },
  "license": "MPL-2.0",
  "readme": "node-webmaker-i18n\n==================\n\nWebmaker Localization Components for node.js and the browser.\n\nThis code is heavily inspired by, and borrows from, [Mozilla's i18n-abide](https://github.com/mozilla/i18n-abide) project.\nHowever, this code has been stripped down to support only those things needed by the Webmaker tools and apps, and is based on\nJSON instead of PO files, uses a different form of client-side localization, etc.\n\n# Usage\n\n## Server-Side with node.js\n\nInstall the node.js module using npm:\n\n```\n$ npm install webmaker-i18n\n```\n\n## Example\n\nThere is an example Express app in the `example/` directory. To run it:\n\n```\n$ npm install\n$ cd example\n$ node app.js\n```\n\nNow navigate to http://localhost:8000.  You'll see examples of server-side and client-side usage.\n\n## API\n\nThe module exposes a number of useful functions, including:\n\n### middleware\n\nThe `middleware` function is used with Express. It should be placed early on in the order of your middleware\nfunctions, such that it can detect and process any extra langauge (i.e., language codes on the URL or\naccept-language header. You use it like so:\n\n```javascript\nvar i18n = require('webmaker-i18n');\n...\napp.use(i18n.middleware({\n  supported_languages: [\n    'en-US', 'th-TH', 'ru'\n  ],\n  default_lang: 'en-US',\n}));\n```\n\nThis will cause the app to look for three locales on startup:\n\n* `locale/en_US`\n* `locale/th_TH`\n* `locale/ru`\n\nYou can change the root locale directory by passing `translation_directory` with another path to the\n`middleware` function (`locale/` is the default).  Notice how the language tags have been converted\nto locale names (i.e., en-US becomes en_US). Each locale directory must have one file named `messages.json`\nwhich contains the strings for the locale.\n\nWhen `middleware` is used, all subsequent middleware and routes will have `req` and `res` objects\nwith additional features. These include:\n\n* `gettext` - a function used to get a localized string for a given key\n* `format` - a function used to interpolate strings (see below)\n* `lang` - the language being used (e.g., 'en-US')\n* `lang_dir` - the language direction (e.g., 'rtl' or 'ltr')\n* `setLocale` a function that can be used to swap locales after the `middleware` has set it automatically\n\n### getStrings\n\nThe `getStrings` function is used to get an object containing all strings for a given language. This\nwill include any strings missing from the given langauge, which are present in the default language.\n\n```javascript\nvar ru = i18n.getStrings('ru');\n```\n\n### stringsRoute\n\nThe `stringsRoute` is a convenience to expose `getStrings` as a route for Express. It takes one optional\nargument, the default language to use (defaults to \"en-US\" if missing). It can be used like so:\n\n```javascript\napp.get( \"/strings/:lang?\", i18n.stringsRoute( \"en-US\" ) );\n```\n\n### getLocales\n\nThe `getLocales` function is used to get a list (array) of supported locale names, and matches the\nnames of the folders that should be present in the `locale/` translation directory.\n\n```javascript\nvar locales = i18n.getLocales();\n```\n\n### format\n\nThe `format` function provides string interpolation, and can be used with either an object for\nnamed variables, or an array  of values for positional replacement.\n\n```javascript\n// Named Example:\ni18n.format(\"%(salutation)s %(place)s\", {salutation: \"Hello\", place: \"World\"}, true);\n\n// Positional Example:\ni18n.format(\"%s %s\", [\"Hello\", \"World\"]);\n```\n\n### langaugeFrom, localeFrom\n\nThe `languageFrom` and `localeFrom` functions convert languages to locales and vice versa.\n\n```javascript\n// en-US (language) to en_US (locale)\nvar enUSlocale = fromLanguage('en-US');\n\n// en_US (locale) to en-US language)\nvar enUSlanguage = fromLocale('en_US');\n```\n\n## Client-Side in the browser\n\nInstall the browser `localized.js` script using bower:\n\n```\n$ bower install webmaker-i18n\n```\n\nThe `localized.js` script is usable with require.js or other AMD module loaders, and also in vanilla JavaScript.\nIn both cases, the code assumes that the HTML page it lives in has language information stored in the HTML element:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en-US\" dir=\"ltr\">\n<head>\n  ...\n  <script src=\"bower_components/webmaker-i18n/localized.js\"></script>\n```\n\n### AMD Usage\n\n```javascript\nrequire(['path/to/localized'], function(localized) {\n  // Don't do anything until the DOM + localized strings are ready\n  localized.ready(function(){\n    var someText = localized.get('some key');\n  });\n});\n```\n\n### Global Usage\n\nIf you aren't using an AMD loader like require.js, the object will get added to the global:\n\n```javascript\n// Don't do anything until the DOM + localized strings are ready\nLocalized.ready(function(){\n  var someText = localized.get('some key');\n});\n```\n\n### Localized members\n\nThe `localized.js` script exposes a number of functions:\n\n* `ready` - a function that initializes the strings (i.e., downloads) on the client-side. A callback\nshould be passed, as well as any desired options, which include `noCache` (whether to do cache busting, default is no)\nand `url` (the url end-point to use to call `getStrings` -- see above, default is '/strings/').\n\n```javascript\nfunction readyCallback() {\n // Safe to use localized.get() now...\n}\n\nvar options = { noCache: true, url: '/localized' }\nlocalized.ready(readyCallback, options);\n```\n\n* `getCurrentLang` - a function that returns the current language defined in the HTML element of the page.\n\n```html\n<html lang=\"th-TH\" dir=\"ltr\">\n...\n<script>\n...\n  var lang = localized.getCurrentLang();\n  // lang === 'th-TH'\n...\n</script>\n```\n\n* `get` - a function that gets the localized version of a given string key. Must be called after `ready` has completed so that\nthe localized strings are loaded.\n\n```javascript\nlocalized.ready(function(){\n  var localized = localized.get('some string key');\n});\n```\n",
  "readmeFilename": "README.md",
  "_id": "webmaker-i18n@0.0.8",
  "dist": {
    "shasum": "9e7b8a7ee2400016de9197591c477020b7581f3e"
  },
  "_from": "https://github.com/mozilla/node-webmaker-i18n/archive/v0.0.8.tar.gz",
  "_resolved": "https://github.com/mozilla/node-webmaker-i18n/archive/v0.0.8.tar.gz"
}
